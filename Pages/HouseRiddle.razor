@using static Blazor_gh.Pages.Home
@inject ILocalStorageService LocalStorage

<section class="gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                <div class="card bg-dark text-white" style="border-radius: 1rem;">
                    <div class="card-body p-5 text-center">
                        <div class="mb-md-5 mt-md-4 pb-5">
                            <h2 class="fw-bold mb-2 text-uppercase">Vem håller på Öster</h2>
                            <p class="text-white-50 mb-5">
                                Det finns fem hus i olika färg bredvid varandra.<br />
                                I varje hus bor en familjemedlem till dig, varje person har en unik favoritdryck, favoritdjur och favoritlag.<br />
                                Använd papper och penna eller fälten nedan för att svara på frågan:<br />
                                <strong>Vem håller på Öster?</strong>
                            </p>
                            <ul style="text-align:left">
                                <li>Mamma bor i det röda huset.</li>
                                <li>Julia håller på Malmö FF.</li>
                                <li>Jennie dricker te.</li>
                                <li>Det gröna huset är precis till vänster om det vita huset.</li>
                                <li>Ägaren av det gröna huset dricker kaffe.</li>
                                <li>Personen som har fiskar håller på Halmstad BK.</li>
                                <li>Ägaren av det gula huset har häst.</li>
                                <li>Den som bor i huset i mitten dricker mjölk.</li>
                                <li>Pontus bor i det första huset.</li>
                                <li>Den som har hund bor bredvid den som håller på Hammarby.</li>
                                <li>Den som håller på Västerås bor bredvid den som har häst.</li>
                                <li>Den som har en katt dricker öl.</li>
                                <li>Tobbe har en kanin.</li>
                                <li>Pontus bor bredvid det blå huset.</li>
                                <li>Den som har en hund har en granne som dricker vatten.</li>
                            </ul>

                            <div data-mdb-input-init class="form-outline form-white mb-4">
                                @foreach (var house in Houses)
                                {
                                    <div class="col-md" style="margin:3px">
                                        <div class="row">
                                            <strong><span>@house.Name</span></strong>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string color) => OnColorChange(color, house))" Value="@house.Color"
                                                         ValueExpression="@(() =>  @house.Color)">
                                                <option value="">Välj färg</option>
                                                @foreach (var color in Colors)
                                                {
                                                    <option value="@color">@color</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string person) => OnPersonChange(person, house))" Value="@house.Person"
                                                         ValueExpression="@(() =>  @house.Person)">
                                                <option value="">Välj person</option>
                                                @foreach (var person in Persons)
                                                {
                                                    <option value="@person">@person</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string drink) => OnDrinkChange(drink, house))" Value="@house.Drink"
                                                         ValueExpression="@(() =>  @house.Drink)">
                                                <option value="">Välj dryck</option>
                                                @foreach (var drink in Drinks)
                                                {
                                                    <option value="@drink">@drink</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string animal) => OnAnimalChange(animal, house))" Value="@house.Animal"
                                                         ValueExpression="@(() =>  @house.Animal)">
                                                <option value="">Välj djur</option>
                                                @foreach (var animal in Animals)
                                                {
                                                    <option value="@animal">@animal</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string team) => OnTeamChange(team, house))" Value="@house.Team"
                                                         ValueExpression="@(() =>  @house.Team)">
                                                <option value="">Välj lag</option>
                                                @foreach (var team in Teams)
                                                {
                                                    <option value="@team">@team</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                }
                            </div>

                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-light btn-lg px-5" @onclick="Validate">Rätta</button>
                        </div>

                        <div>
                            <p class="mb-0">
                                @if (!string.IsNullOrEmpty(_errorMessage))
                                {
                                    <span style="color:red">@_errorMessage</span>
                                }
                                else
                                {
                                    <span>&nbsp</span>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    public List<string> Colors = new List<string>()
    {
        "Blå",
        "Grön",
        "Röd",
        "Vit",
        "Gul"
    };
    public List<string> Persons = new List<string>()
    {
        "Mamma",
        "Jennie",
        "Julia",
        "Pontus",
        "Tobias"
    };
    public List<string> Drinks = new List<string>()
    {
        "Öl",
        "Kaffe",
        "Mjölk",
        "Te",
        "Vatten"
    };
    public List<string> Animals = new List<string>()
    {
        "Hund",
        "Katt",
        "Häst",
        "Fisk",
        "Kanin"
    };
    public List<string> Teams = new List<string>()
    {
        "Halmstad BK",
        "Hammarby IF",
        "Malmö FF",
        "Västerås SK",
        "Östers IF"
    };
    public List<House> Houses = new List<House>()
    {
        new House("Hus #1"),
        new House("Hus #2"),
        new House("Hus #3"),
        new House("Hus #4"),
        new House("Hus #5")
    };

    [Parameter]
    public EventCallback NotifyParent { get; set; }

    private string? _errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load data
            for (int i = Houses.Count - 1; i >= 0; i--)
            {
                House? house = await LocalStorage.GetItemAsync<House>(Houses[i].Name);
                if (house != null)
                {
                    Houses[i] = house;
                }
            }

            StateHasChanged();
        }
    }

    private void OnColorChange(string color, House house)
    {
        house.Color = color;
        StoreItem(house);
    }
    private void OnPersonChange(string person, House house)
    {
        house.Person = person;
        StoreItem(house);
    }

    private void OnDrinkChange(string drink, House house)
    {
        house.Drink = drink;
        StoreItem(house);
    }

    private void OnAnimalChange(string animal, House house)
    {
        house.Animal = animal;
        StoreItem(house);
    }

    private void OnTeamChange(string team, House house)
    {
        house.Team = team;
        StoreItem(house);
    }

    public async void StoreItem(House house)
    {
        await LocalStorage.SetItemAsync(house.Name, house);
    }

    private async Task Validate()
    {
        var house1 = Houses[0];

        bool isHouse1Valid = IsHouseValid(Houses[0], "Röd", "Tobias", "Öl", "Katt", "Malmö FF");
        bool isHouse2Valid = IsHouseValid(Houses[1], "", "", "", "", "");
        bool isHouse3Valid = IsHouseValid(Houses[2], "", "", "", "", "");
        bool isHouse4Valid = IsHouseValid(Houses[3], "", "", "", "", "");
        bool isHouse5Valid = IsHouseValid(Houses[4], "", "", "", "", "");

        if (isHouse1Valid)// && isHouse2Valid && isHouse3Valid && isHouse4Valid && isHouse5Valid)
        {
            await NotifyParent.InvokeAsync();
        }
        else
        {
            _errorMessage = "Fel fel fel, försök igen!";
        }
    }

    private bool IsHouseValid(House house, string color, string person, string drink, string animal, string team)
    {
        return (house.Color == color &&
                house.Person == person &&
                house.Drink == drink &&
                house.Animal == animal &&
                house.Team == team);
    }


    public class House
    {
        public string Name { get; set; }

        public string? Color { get; set; }
        public string? Person { get; set; }
        public string? Drink { get; set; }
        public string? Animal { get; set; }
        public string? Team { get; set; }

        public House(string name)
        {
            Name = name;
        }
    }
}
