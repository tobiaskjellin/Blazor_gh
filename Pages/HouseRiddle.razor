@using static Blazor_gh.Pages.Home
@inject ILocalStorageService LocalStorage

<section class="gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-8 col-xl-8">
                <div class="card bg-dark text-white" style="border-radius: 1rem;">
                    <div class="card-body p-5 text-center">
                        <div class="mb-md-5 mt-md-4 pb-5">
                            <h2 class="fw-bold mb-2 text-uppercase">Vem håller på Öster</h2>
                            <p class="text-white-50 mb-5">
                                Det finns fem hus i olika färg bredvid varandra.<br />
                                I varje hus bor en familjemedlem till dig, varje person har en unik favoritdryck, favoritdjur och favoritlag.<br />
                                <strong>Fyll i fälten nedan för att ta reda på vem som håller på Öster?</strong>
                            </p>
                            <ul style="text-align:left">
                                @*
                                The Brit lives in the Red house.
                                The Swede keeps Dogs as pets.
                                The Dane drinks Tea.
                                The Green house is exactly to the left of the White house.
                                The owner of the Green house drinks Coffee.
                                The person who smokes Pall Mall rears Birds.
                                The owner of the Yellow house smokes Dunhill.
                                The man living in the centre house drinks Milk.
                                The Norwegian lives in the first house.

                                The man who smokes Blends lives next to the one who keeps Cats.
                                The man who keeps Horses lives next to the man who smokes Dunhill.
                                The man who smokes Blue Master drinks Beer.
                                The German smokes Prince.
                                The Norwegian lives next to the Blue house.
                                The man who smokes Blends has a neighbour who drinks Water.
                                *@

                                <li>Mamma bor i det röda huset.</li>
                                <li>Tobias håller på Malmö FF.</li>
                                <li>Jennie dricker te.</li>
                                <li>Det gröna huset är precis till vänster om det vita huset.</li>
                                <li>Ägaren av det gröna huset dricker kaffe.</li>
                                <li>Personen som har hästar håller på Halmstad BK.</li>
                                <li>Ägaren av det gula huset har hund.</li>
                                <li>Den som bor i huset i mitten dricker mjölk.</li>
                                <li>Pontus bor i det första huset.</li>
                                <li>Den som har fåglar bor bredvid den som håller på Hammarby.</li>
                                <li>Den som håller på Västerås bor bredvid den som har hund.</li>
                                <li>Den som har en katt dricker öl.</li>
                                <li>Julia har massa fiskar i sitt akvarium.</li>
                                <li>Pontus bor bredvid det blå huset.</li>
                                <li>Den som har fåglar har en granne som dricker vatten.</li>
                            </ul>

                            <div>
                                @foreach (var item in Houses)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-house-door" viewBox="0 0 16 16" style="padding:4px">
                                        <path d="M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4z" />
                                    </svg>
                                }
                            </div>

                            <div data-mdb-input-init class="form-outline form-white mb-4">
                                @foreach (var house in Houses)
                                {
                                    <div class="col-md" style="margin:3px">
                                        <div class="row">
                                            <strong><span>@house.Name</span></strong>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string color) => OnColorChange(color, house))" Value="@house.Color"
                                                         ValueExpression="@(() =>  @house.Color)">
                                                <option value="">Välj färg</option>
                                                @foreach (var color in Colors)
                                                {
                                                    <option value="@color">@color</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string person) => OnPersonChange(person, house))" Value="@house.Person"
                                                         ValueExpression="@(() =>  @house.Person)">
                                                <option value="">Välj person</option>
                                                @foreach (var person in Persons)
                                                {
                                                    <option value="@person">@person</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string drink) => OnDrinkChange(drink, house))" Value="@house.Drink"
                                                         ValueExpression="@(() =>  @house.Drink)">
                                                <option value="">Välj dryck</option>
                                                @foreach (var drink in Drinks)
                                                {
                                                    <option value="@drink">@drink</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string team) => OnTeamChange(team, house))" Value="@house.Team"
                                                         ValueExpression="@(() =>  @house.Team)">
                                                <option value="">Välj lag</option>
                                                @foreach (var team in Teams)
                                                {
                                                    <option value="@team">@team</option>
                                                }
                                            </InputSelect>
                                        </div>
                                        <div class="row my-2">
                                            <InputSelect class="form-select bg-dark text-white" ValueChanged="@((string animal) => OnAnimalChange(animal, house))" Value="@house.Animal"
                                                         ValueExpression="@(() =>  @house.Animal)">
                                                <option value="">Välj djur</option>
                                                @foreach (var animal in Animals)
                                                {
                                                    <option value="@animal">@animal</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                }
                            </div>

                            <button data-mdb-button-init data-mdb-ripple-init class="btn btn-outline-light btn-lg px-5" @onclick="Validate">Rätta</button>
                        </div>

                        <div>
                            <p class="mb-0">
                                @if (!string.IsNullOrEmpty(_errorMessage))
                                {
                                    <span style="color:red">@_errorMessage</span>
                                }
                                else
                                {
                                    <span>&nbsp</span>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    public List<string> Colors = new List<string>()
    {
        "Blå",
        "Grön",
        "Röd",
        "Vit",
        "Gul"
    };
    public List<string> Persons = new List<string>()
    {
        "Mamma",  // brit
        "Jennie", // dane
        "Julia",  // german
        "Pontus", // norwegian
        "Tobias"  // swede
    };
    public List<string> Drinks = new List<string>()
    {
        "Öl",
        "Kaffe",
        "Mjölk",
        "Te",
        "Vatten"
    };
    public List<string> Animals = new List<string>() // Old Cigarette
    {
        "Fågel", // blend
        "Katt",  // blue master
        "Hund",  // dunhill
        "Häst",  // pall mall
        "Fisk"   // prince
    };
    public List<string> Teams = new List<string>() // Old PET
    {
        "Halmstad BK",  // Birds
        "Hammarby IF",  // Cat
        "Malmö FF",     // Dog
        "Västerås SK",  // Horse
        "Östers IF"     // Fish
    };
    public List<House> Houses = new List<House>()
    {
        new House("Hus #1"),
        new House("Hus #2"),
        new House("Hus #3"),
        new House("Hus #4"),
        new House("Hus #5")
    };

    [Parameter]
    public EventCallback NotifyParent { get; set; }

    private string? _errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load data
            for (int i = Houses.Count - 1; i >= 0; i--)
            {
                House? house = await LocalStorage.GetItemAsync<House>(Houses[i].Name);
                if (house != null)
                {
                    Houses[i] = house;
                }
            }

            StateHasChanged();
        }
    }

    private void OnColorChange(string color, House house)
    {
        house.Color = color;
        StoreItem(house);
    }

    private void OnPersonChange(string person, House house)
    {
        house.Person = person;
        StoreItem(house);
    }

    private void OnDrinkChange(string drink, House house)
    {
        house.Drink = drink;
        StoreItem(house);
    }

    private void OnAnimalChange(string animal, House house)
    {
        house.Animal = animal;
        StoreItem(house);
    }

    private void OnTeamChange(string team, House house)
    {
        house.Team = team;
        StoreItem(house);
    }

    public async void StoreItem(House house)
    {
        await LocalStorage.SetItemAsync(house.Name, house);
    }

    private async Task Validate()
    {
        var house1 = Houses[0];

        bool isHouse1Valid = IsHouseValid(Houses[0], "Gul", "Pontus", "Vatten", "Hund", "Hammarby IF");
        bool isHouse2Valid = IsHouseValid(Houses[1], "Blå", "Jennie", "Te", "Fågel", "Västerås SK");
        bool isHouse3Valid = IsHouseValid(Houses[2], "Röd", "Mamma", "Mjölk", "Häst", "Halmstad BK");
        bool isHouse4Valid = IsHouseValid(Houses[3], "Grön", "Julia", "Kaffe", "Fisk", "Östers IF");
        bool isHouse5Valid = IsHouseValid(Houses[4], "Vit", "Tobias", "Öl", "Katt", "Malmö FF");

        if (isHouse1Valid && isHouse2Valid && isHouse3Valid && isHouse4Valid && isHouse5Valid)
        {
            await NotifyParent.InvokeAsync();
        }
        else
        {
            _errorMessage = "Fel fel fel, försök igen!";
        }
    }

    private bool IsHouseValid(House house, string color, string person, string drink, string animal, string team)
    {
        return (house.Color == color &&
                house.Person == person &&
                house.Drink == drink &&
                house.Animal == animal &&
                house.Team == team);
    }


    public class House
    {
        public string Name { get; set; }

        public string? Color { get; set; }
        public string? Person { get; set; }
        public string? Drink { get; set; }
        public string? Animal { get; set; }
        public string? Team { get; set; }

        public House(string name)
        {
            Name = name;
        }
    }
}
